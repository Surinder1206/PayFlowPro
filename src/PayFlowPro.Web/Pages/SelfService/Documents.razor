@page "/self-service/documents"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using PayFlowPro.Core.Services
@using PayFlowPro.Shared.DTOs
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Employee")]

<div class="container-fluid py-4">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="/self-service">Self Service</a></li>
                            <li class="breadcrumb-item active">My Documents</li>
                        </ol>
                    </nav>
                    <h1 class="h3 mb-0">
                        <i class="fas fa-folder-open text-primary me-2"></i>
                        My Documents
                    </h1>
                    <p class="text-muted">Upload and manage your personal documents and certificates</p>
                </div>
                <div>
                    <button class="btn btn-primary" @onclick="ShowUploadModal">
                        <i class="fas fa-upload me-2"></i>
                        Upload Document
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="row">
            <div class="col-12 text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 text-muted">Loading your documents...</p>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @errorMessage
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Document Categories -->
        <div class="row mb-4">
            <div class="col-12">
                <h4 class="mb-3">
                    <i class="fas fa-tags text-info me-2"></i>
                    Document Categories
                </h4>
            </div>
            
            <div class="col-lg-2 col-md-4 col-6 mb-3">
                <div class="card text-center h-100 @(selectedCategory == "Identity" ? "border-primary bg-primary text-white" : "")">
                    <div class="card-body p-3" style="cursor: pointer;" @onclick='() => FilterByCategory("Identity")'>
                        <i class="fas fa-id-card fa-2x mb-2"></i>
                        <h6 class="card-title mb-1">Identity</h6>
                        <small>Passport, ID, License</small>
                        <div class="badge bg-secondary mt-2">@GetDocumentCount("Identity")</div>
                    </div>
                </div>
            </div>

            <div class="col-lg-2 col-md-4 col-6 mb-3">
                <div class="card text-center h-100 @(selectedCategory == "Education" ? "border-primary bg-primary text-white" : "")">
                    <div class="card-body p-3" style="cursor: pointer;" @onclick='() => FilterByCategory("Education")'>
                        <i class="fas fa-graduation-cap fa-2x mb-2"></i>
                        <h6 class="card-title mb-1">Education</h6>
                        <small>Certificates, Degrees</small>
                        <div class="badge bg-secondary mt-2">@GetDocumentCount("Education")</div>
                    </div>
                </div>
            </div>

            <div class="col-lg-2 col-md-4 col-6 mb-3">
                <div class="card text-center h-100 @(selectedCategory == "Medical" ? "border-primary bg-primary text-white" : "")">
                    <div class="card-body p-3" style="cursor: pointer;" @onclick='() => FilterByCategory("Medical")'>
                        <i class="fas fa-heartbeat fa-2x mb-2"></i>
                        <h6 class="card-title mb-1">Medical</h6>
                        <small>Health Records</small>
                        <div class="badge bg-secondary mt-2">@GetDocumentCount("Medical")</div>
                    </div>
                </div>
            </div>

            <div class="col-lg-2 col-md-4 col-6 mb-3">
                <div class="card text-center h-100 @(selectedCategory == "Tax" ? "border-primary bg-primary text-white" : "")">
                    <div class="card-body p-3" style="cursor: pointer;" @onclick='() => FilterByCategory("Tax")'>
                        <i class="fas fa-calculator fa-2x mb-2"></i>
                        <h6 class="card-title mb-1">Tax</h6>
                        <small>Tax Forms, Returns</small>
                        <div class="badge bg-secondary mt-2">@GetDocumentCount("Tax")</div>
                    </div>
                </div>
            </div>

            <div class="col-lg-2 col-md-4 col-6 mb-3">
                <div class="card text-center h-100 @(selectedCategory == "Contract" ? "border-primary bg-primary text-white" : "")">
                    <div class="card-body p-3" style="cursor: pointer;" @onclick='() => FilterByCategory("Contract")'>
                        <i class="fas fa-file-contract fa-2x mb-2"></i>
                        <h6 class="card-title mb-1">Contract</h6>
                        <small>Employment, NDA</small>
                        <div class="badge bg-secondary mt-2">@GetDocumentCount("Contract")</div>
                    </div>
                </div>
            </div>

            <div class="col-lg-2 col-md-4 col-6 mb-3">
                <div class="card text-center h-100 @(selectedCategory == "" ? "border-primary bg-primary text-white" : "")">
                    <div class="card-body p-3" style="cursor: pointer;" @onclick='() => FilterByCategory("")'>
                        <i class="fas fa-list fa-2x mb-2"></i>
                        <h6 class="card-title mb-1">All</h6>
                        <small>View All Documents</small>
                        <div class="badge bg-secondary mt-2">@documents.Count</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Document List -->
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-files me-2"></i>
                            @(string.IsNullOrEmpty(selectedCategory) ? "All Documents" : $"{selectedCategory} Documents")
                        </h5>
                        <div class="d-flex gap-2">
                            <select class="form-select form-select-sm" @bind="sortBy" @bind:after="SortDocuments" style="width: auto;">
                                <option value="date-desc">Newest First</option>
                                <option value="date-asc">Oldest First</option>
                                <option value="name-asc">Name A-Z</option>
                                <option value="name-desc">Name Z-A</option>
                                <option value="size-desc">Largest First</option>
                                <option value="size-asc">Smallest First</option>
                            </select>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (filteredDocuments?.Any() == true)
                        {
                            <div class="row">
                                @foreach (var document in filteredDocuments)
                                {
                                    <div class="col-lg-4 col-md-6 mb-3">
                                        <div class="card border h-100">
                                            <div class="card-body">
                                                <div class="d-flex align-items-start">
                                                    <div class="flex-shrink-0 me-3">
                                                        <i class="@GetFileIcon(document.FileName) fa-2x @GetFileColor(document.FileName)"></i>
                                                    </div>
                                                    <div class="flex-grow-1 min-w-0">
                                                        <h6 class="card-title mb-1 text-truncate" title="@document.FileName">
                                                            @document.DocumentName
                                                        </h6>
                                                        <div class="small text-muted mb-2">
                                                            <div>@document.Category</div>
                                                            <div>@FormatFileSize(document.FileSize)</div>
                                                            <div>@document.UploadedAt.ToString("MMM dd, yyyy")</div>
                                                        </div>
                                                        <div class="d-flex gap-1">
                                                            <span class="badge bg-@GetStatusColor(document.Status)">@document.Status</span>
                                                            @if (document.ExpiryDate.HasValue)
                                                            {
                                                                var daysUntilExpiry = (document.ExpiryDate.Value - DateTime.Now).Days;
                                                                if (daysUntilExpiry <= 30)
                                                                {
                                                                    <span class="badge bg-warning">
                                                                        <i class="fas fa-clock me-1"></i>
                                                                        @(daysUntilExpiry <= 0 ? "Expired" : $"Expires in {daysUntilExpiry}d")
                                                                    </span>
                                                                }
                                                            }
                                                        </div>
                                                    </div>
                                                    <div class="dropdown">
                                                        <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown">
                                                            <i class="fas fa-ellipsis-v"></i>
                                                        </button>
                                                        <ul class="dropdown-menu dropdown-menu-end">
                                                            <li>
                                                                <a class="dropdown-item" href="@document.FilePath" target="_blank">
                                                                    <i class="fas fa-eye me-2"></i>View
                                                                </a>
                                                            </li>
                                                            <li>
                                                                <a class="dropdown-item" href="@document.FilePath" download="@document.FileName">
                                                                    <i class="fas fa-download me-2"></i>Download
                                                                </a>
                                                            </li>
                                                            <li><hr class="dropdown-divider"></li>
                                                            <li>
                                                                <button class="dropdown-item text-danger" @onclick="() => DeleteDocument(document.Id)">
                                                                    <i class="fas fa-trash me-2"></i>Delete
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5 text-muted">
                                <i class="fas fa-folder-open fa-3x mb-3"></i>
                                <h5>No Documents Found</h5>
                                <p>@(string.IsNullOrEmpty(selectedCategory) ? "You haven't uploaded any documents yet." : $"No {selectedCategory.ToLower()} documents found.")</p>
                                <button class="btn btn-primary" @onclick="ShowUploadModal">
                                    <i class="fas fa-upload me-2"></i>
                                    Upload Your First Document
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Upload Modal -->
@if (showUploadModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-upload me-2"></i>
                        Upload Document
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideUploadModal"></button>
                </div>
                <EditForm Model="newDocument" OnValidSubmit="UploadDocument">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Document Name <span class="text-danger">*</span></label>
                            <InputText @bind-Value="newDocument.DocumentName" class="form-control" placeholder="Enter document name" />
                            <ValidationMessage For="() => newDocument.DocumentName" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Category <span class="text-danger">*</span></label>
                            <InputSelect @bind-Value="newDocument.Category" class="form-select">
                                <option value="">Select Category</option>
                                <option value="Identity">Identity Documents</option>
                                <option value="Education">Education Certificates</option>
                                <option value="Medical">Medical Records</option>
                                <option value="Tax">Tax Documents</option>
                                <option value="Contract">Contracts & Agreements</option>
                                <option value="Other">Other</option>
                            </InputSelect>
                            <ValidationMessage For="() => newDocument.Category" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea @bind-Value="newDocument.Description" class="form-control" rows="2" 
                                         placeholder="Brief description of the document" />
                            <ValidationMessage For="() => newDocument.Description" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Expiry Date (Optional)</label>
                            <InputDate @bind-Value="newDocument.ExpiryDate" class="form-control" />
                            <div class="form-text">Set expiry date for documents like passport, license, certificates</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Select File <span class="text-danger">*</span></label>
                            <InputFile OnChange="HandleFileSelected" class="form-control" accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" />
                            <div class="form-text">
                                Supported formats: PDF, DOC, DOCX, JPG, PNG. Maximum size: 10MB
                            </div>
                            @if (!string.IsNullOrEmpty(uploadError))
                            {
                                <div class="text-danger small mt-1">@uploadError</div>
                            }
                        </div>

                        @if (selectedFile != null)
                        {
                            <div class="alert alert-info">
                                <i class="fas fa-file me-2"></i>
                                <strong>Selected:</strong> @selectedFile.Name (@FormatFileSize(selectedFile.Size))
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideUploadModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@(isUploading || selectedFile == null)">
                            @if (isUploading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Uploading...</span>
                            }
                            else
                            {
                                <i class="fas fa-upload me-2"></i>
                                <span>Upload Document</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<style>
    .min-w-0 {
        min-width: 0;
    }
    
    .text-truncate {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
</style>

@code {
    private List<EmployeeDocumentDto> documents = new();
    private List<EmployeeDocumentDto> filteredDocuments = new();
    private UploadDocumentDto newDocument = new();
    private IBrowserFile? selectedFile;
    
    private bool isLoading = true;
    private bool showUploadModal = false;
    private bool isUploading = false;
    private string? errorMessage;
    private string? uploadError;
    private string selectedCategory = "";
    private string sortBy = "date-desc";
    private int currentEmployeeId;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployeeData();
        await LoadDocuments();
    }

    private async Task LoadEmployeeData()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState?.User?.Identity?.IsAuthenticated == true)
            {
                var userId = authState.User.FindFirst("sub")?.Value ?? 
                           authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                
                if (!string.IsNullOrEmpty(userId))
                {
                    // Get employee ID from user - you'll need to implement this method
                    currentEmployeeId = 1; // This should be retrieved from the user's employee record
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load employee data: {ex.Message}";
        }
    }

    private async Task LoadDocuments()
    {
        try
        {
            isLoading = true;
            
            // Simulate loading documents - replace with actual service call
            documents = new List<EmployeeDocumentDto>
            {
                new() { Id = 1, DocumentName = "Passport Copy", Category = "Identity", FileName = "passport.pdf", 
                       FileSize = 1024000, Status = "Approved", UploadedAt = DateTime.Now.AddDays(-30),
                       ExpiryDate = DateTime.Now.AddYears(2), FilePath = "/documents/passport.pdf" },
                new() { Id = 2, DocumentName = "Degree Certificate", Category = "Education", FileName = "degree.pdf", 
                       FileSize = 2048000, Status = "Pending", UploadedAt = DateTime.Now.AddDays(-15),
                       FilePath = "/documents/degree.pdf" },
                new() { Id = 3, DocumentName = "Medical Report", Category = "Medical", FileName = "medical.pdf", 
                       FileSize = 512000, Status = "Approved", UploadedAt = DateTime.Now.AddDays(-7),
                       FilePath = "/documents/medical.pdf" },
            };

            FilterAndSortDocuments();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load documents: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterByCategory(string category)
    {
        selectedCategory = category;
        FilterAndSortDocuments();
    }

    private void SortDocuments()
    {
        FilterAndSortDocuments();
    }

    private void FilterAndSortDocuments()
    {
        var filtered = documents.AsEnumerable();

        // Apply category filter
        if (!string.IsNullOrEmpty(selectedCategory))
        {
            filtered = filtered.Where(d => d.Category == selectedCategory);
        }

        // Apply sorting
        filtered = sortBy switch
        {
            "date-desc" => filtered.OrderByDescending(d => d.UploadedAt),
            "date-asc" => filtered.OrderBy(d => d.UploadedAt),
            "name-asc" => filtered.OrderBy(d => d.DocumentName),
            "name-desc" => filtered.OrderByDescending(d => d.DocumentName),
            "size-desc" => filtered.OrderByDescending(d => d.FileSize),
            "size-asc" => filtered.OrderBy(d => d.FileSize),
            _ => filtered.OrderByDescending(d => d.UploadedAt)
        };

        filteredDocuments = filtered.ToList();
    }

    private int GetDocumentCount(string category)
    {
        return documents.Count(d => d.Category == category);
    }

    private void ShowUploadModal()
    {
        newDocument = new UploadDocumentDto();
        selectedFile = null;
        uploadError = null;
        showUploadModal = true;
    }

    private void HideUploadModal()
    {
        showUploadModal = false;
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadError = null;
        selectedFile = e.File;

        // Validate file size (10MB limit)
        if (selectedFile.Size > 10 * 1024 * 1024)
        {
            uploadError = "File size cannot exceed 10MB";
            selectedFile = null;
            return;
        }

        // Validate file type
        var allowedTypes = new[] { "application/pdf", "application/msword", 
                                  "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                  "image/jpeg", "image/jpg", "image/png" };
        if (!allowedTypes.Contains(selectedFile.ContentType))
        {
            uploadError = "Invalid file type. Only PDF, DOC, DOCX, JPG, and PNG files are allowed.";
            selectedFile = null;
        }
    }

    private async Task UploadDocument()
    {
        if (selectedFile == null) return;

        try
        {
            isUploading = true;
            
            // Implement document upload logic here
            await Task.Delay(2000); // Simulate upload
            
            // Add to documents list (in real implementation, this would come from the server response)
            documents.Add(new EmployeeDocumentDto
            {
                Id = documents.Count + 1,
                DocumentName = newDocument.DocumentName,
                Category = newDocument.Category,
                FileName = selectedFile.Name,
                FileSize = selectedFile.Size,
                Status = "Pending",
                UploadedAt = DateTime.Now,
                ExpiryDate = newDocument.ExpiryDate,
                Description = newDocument.Description,
                FilePath = $"/documents/{selectedFile.Name}"
            });

            FilterAndSortDocuments();
            HideUploadModal();
        }
        catch (Exception ex)
        {
            uploadError = $"Upload failed: {ex.Message}";
        }
        finally
        {
            isUploading = false;
        }
    }

    private async Task DeleteDocument(int documentId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this document?");
        if (confirmed)
        {
            documents.RemoveAll(d => d.Id == documentId);
            FilterAndSortDocuments();
        }
    }

    private string GetFileIcon(string fileName)
    {
        var extension = Path.GetExtension(fileName)?.ToLower();
        return extension switch
        {
            ".pdf" => "fas fa-file-pdf",
            ".doc" or ".docx" => "fas fa-file-word",
            ".jpg" or ".jpeg" or ".png" => "fas fa-file-image",
            _ => "fas fa-file"
        };
    }

    private string GetFileColor(string fileName)
    {
        var extension = Path.GetExtension(fileName)?.ToLower();
        return extension switch
        {
            ".pdf" => "text-danger",
            ".doc" or ".docx" => "text-primary",
            ".jpg" or ".jpeg" or ".png" => "text-success",
            _ => "text-secondary"
        };
    }

    private string GetStatusColor(string status)
    {
        return status?.ToLower() switch
        {
            "approved" => "success",
            "pending" => "warning",
            "rejected" => "danger",
            _ => "secondary"
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB" };
        int counter = 0;
        decimal number = bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        return $"{number:n1} {suffixes[counter]}";
    }

    // DTOs (these should be moved to appropriate DTO files)
    public class EmployeeDocumentDto
    {
        public int Id { get; set; }
        public string DocumentName { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
        public string FileName { get; set; } = string.Empty;
        public long FileSize { get; set; }
        public string Status { get; set; } = string.Empty;
        public DateTime UploadedAt { get; set; }
        public DateTime? ExpiryDate { get; set; }
        public string? Description { get; set; }
        public string FilePath { get; set; } = string.Empty;
    }

    public class UploadDocumentDto
    {
        public string DocumentName { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
        public string? Description { get; set; }
        public DateTime? ExpiryDate { get; set; }
    }
}