@page "/self-service/leave"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using PayFlowPro.Core.Services
@using PayFlowPro.Shared.DTOs
@using PayFlowPro.Models.DTOs.Leave
@inject ILeaveManagementService LeaveService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Employee")]

<div class="container-fluid py-4">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="/self-service">Self Service</a></li>
                            <li class="breadcrumb-item active">My Leave</li>
                        </ol>
                    </nav>
                    <h1 class="h3 mb-0">
                        <i class="fas fa-calendar-check text-primary me-2"></i>
                        My Leave Management
                    </h1>
                    <p class="text-muted">Manage your leave balance, submit requests, and track leave history</p>
                </div>
                <div>
                    <a href="/leave/request/new" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>
                        New Leave Request
                    </a>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="row">
            <div class="col-12 text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 text-muted">Loading your leave information...</p>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @errorMessage
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Leave Balance Overview -->
        <div class="row mb-4">
            <div class="col-12">
                <h4 class="mb-3">
                    <i class="fas fa-chart-pie text-success me-2"></i>
                    Leave Balance Overview - FY @DateTime.Now.Year
                </h4>
            </div>
            
            @if (leaveSummary != null)
            {
                <div class="col-lg-3 col-md-6 mb-3">
                    <div class="card bg-gradient-success text-white h-100">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-calendar-plus fa-2x opacity-75"></i>
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <div class="fs-4 fw-bold">@leaveSummary.TotalAllocated.ToString("F1")</div>
                                    <div class="small">Total Allocated</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-3 col-md-6 mb-3">
                    <div class="card bg-gradient-primary text-white h-100">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-calendar-check fa-2x opacity-75"></i>
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <div class="fs-4 fw-bold">@leaveSummary.TotalAvailable.ToString("F1")</div>
                                    <div class="small">Available</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-3 col-md-6 mb-3">
                    <div class="card bg-gradient-info text-white h-100">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-calendar-times fa-2x opacity-75"></i>
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <div class="fs-4 fw-bold">@leaveSummary.TotalUsed.ToString("F1")</div>
                                    <div class="small">Used</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-3 col-md-6 mb-3">
                    <div class="card bg-gradient-warning text-white h-100">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-clock fa-2x opacity-75"></i>
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <div class="fs-4 fw-bold">@leaveSummary.TotalPending.ToString("F1")</div>
                                    <div class="small">Pending</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Leave Type Balances -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">
                            <i class="fas fa-list me-2"></i>
                            Leave Type Balances
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (leaveBalances?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Leave Type</th>
                                            <th class="text-center">Allocated</th>
                                            <th class="text-center">Used</th>
                                            <th class="text-center">Available</th>
                                            <th class="text-center">Pending</th>
                                            <th class="text-center">Carried Over</th>
                                            <th class="text-center">Progress</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var balance in leaveBalances)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <div class="badge me-2" style="background-color: @balance.ColorCode">
                                                            @balance.Code
                                                        </div>
                                                        <div>
                                                            <div class="fw-bold">@balance.Name</div>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td class="text-center">
                                                    <span class="badge bg-secondary">@balance.AllocatedDays.ToString("F1")</span>
                                                </td>
                                                <td class="text-center">
                                                    <span class="badge bg-info">@balance.UsedDays.ToString("F1")</span>
                                                </td>
                                                <td class="text-center">
                                                    <span class="badge bg-success">@balance.AvailableDays.ToString("F1")</span>
                                                </td>
                                                <td class="text-center">
                                                    <span class="badge bg-warning">@balance.PendingDays.ToString("F1")</span>
                                                </td>
                                                <td class="text-center">
                                                    @if (balance.CarriedOverDays > 0)
                                                    {
                                                        <span class="badge bg-primary">@balance.CarriedOverDays.ToString("F1")</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td class="text-center" style="min-width: 120px;">
                                                    @{
                                                        var usedPercentage = balance.AllocatedDays > 0 ? 
                                                            (double)(balance.UsedDays / balance.AllocatedDays) * 100 : 0;
                                                        var progressColor = usedPercentage < 50 ? "bg-success" : 
                                                                          usedPercentage < 80 ? "bg-warning" : "bg-danger";
                                                    }
                                                    <div class="progress" style="height: 8px;">
                                                        <div class="progress-bar @progressColor" 
                                                             role="progressbar" 
                                                             style="width: @usedPercentage.ToString("F0")%">
                                                        </div>
                                                    </div>
                                                    <small class="text-muted">@usedPercentage.ToString("F0")% used</small>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4 text-muted">
                                <i class="fas fa-calendar-times fa-3x mb-3"></i>
                                <p>No leave balances found</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Leave Requests -->
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-history me-2"></i>
                            My Leave Requests
                        </h5>
                        <div class="d-flex gap-2">
                            <select class="form-select form-select-sm" @bind="statusFilter" @bind:after="OnFilterChanged" style="width: auto;">
                                <option value="">All Status</option>
                                <option value="Pending">Pending</option>
                                <option value="Approved">Approved</option>
                                <option value="Rejected">Rejected</option>
                            </select>
                            <select class="form-select form-select-sm" @bind="yearFilter" @bind:after="OnFilterChanged" style="width: auto;">
                                <option value="">All Years</option>
                                @for (int year = DateTime.Now.Year; year >= DateTime.Now.Year - 3; year--)
                                {
                                    <option value="@year">@year</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (isLoadingRequests)
                        {
                            <div class="text-center py-4">
                                <div class="spinner-border spinner-border-sm text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2 text-muted">Loading leave requests...</p>
                            </div>
                        }
                        else if (leaveRequests?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Request #</th>
                                            <th>Leave Type</th>
                                            <th>Date Range</th>
                                            <th>Days</th>
                                            <th>Status</th>
                                            <th>Submitted</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var request in leaveRequests.Take(10))
                                        {
                                            <tr>
                                                <td>
                                                    <span class="fw-bold text-primary">@request.RequestNumber</span>
                                                </td>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <div class="badge me-2" style="background-color: @request.LeaveTypeColor">
                                                            @(request.LeaveType?.Code ?? "N/A")
                                                        </div>
                                                        @request.LeaveTypeName
                                                    </div>
                                                </td>
                                                <td>
                                                    <div>
                                                        @request.StartDate.ToString("MMM dd") - @request.EndDate.ToString("MMM dd, yyyy")
                                                        @if (request.IsHalfDay)
                                                        {
                                                            <small class="text-muted d-block">(@request.HalfDaySession Half Day)</small>
                                                        }
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge bg-secondary">@request.DaysRequested.ToString("F1")</span>
                                                </td>
                                                <td>
                                                    <span class="badge bg-@GetStatusColor(request.Status)">
                                                        @request.Status
                                                    </span>
                                                </td>
                                                <td>
                                                    @request.SubmittedAt.ToString("MMM dd, yyyy")
                                                </td>
                                                <td>
                                                    <div class="btn-group btn-group-sm">
                                                        <button class="btn btn-outline-primary btn-sm" 
                                                                @onclick="() => ViewRequestDetails(request.Id)">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                        @if (request.Status == "Pending")
                                                        {
                                                            <button class="btn btn-outline-danger btn-sm" 
                                                                    @onclick="() => CancelRequest(request.Id)">
                                                                <i class="fas fa-times"></i>
                                                            </button>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            
                            @if (leaveRequests.Count > 10)
                            {
                                <div class="text-center mt-3">
                                    <button class="btn btn-outline-primary" @onclick="LoadMoreRequests">
                                        <i class="fas fa-chevron-down me-2"></i>
                                        Load More (@(leaveRequests.Count - 10) more)
                                    </button>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-4 text-muted">
                                <i class="fas fa-calendar-plus fa-3x mb-3"></i>
                                <p>No leave requests found</p>
                                <a href="/leave/new" class="btn btn-primary">
                                    <i class="fas fa-plus me-2"></i>
                                    Submit Your First Request
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Request Details Modal -->
@if (selectedRequest != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-calendar-alt me-2"></i>
                        Leave Request Details
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseRequestDetails"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Request Information</h6>
                            <table class="table table-sm">
                                <tr>
                                    <td><strong>Request #:</strong></td>
                                    <td>@selectedRequest.RequestNumber</td>
                                </tr>
                                <tr>
                                    <td><strong>Leave Type:</strong></td>
                                    <td>@selectedRequest.LeaveTypeName</td>
                                </tr>
                                <tr>
                                    <td><strong>Date Range:</strong></td>
                                    <td>@selectedRequest.StartDate.ToString("MMM dd") - @selectedRequest.EndDate.ToString("MMM dd, yyyy")</td>
                                </tr>
                                <tr>
                                    <td><strong>Days Requested:</strong></td>
                                    <td>@selectedRequest.DaysRequested.ToString("F1")</td>
                                </tr>
                                <tr>
                                    <td><strong>Status:</strong></td>
                                    <td><span class="badge bg-@GetStatusColor(selectedRequest.Status)">@selectedRequest.Status</span></td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6>Submission Details</h6>
                            <table class="table table-sm">
                                <tr>
                                    <td><strong>Submitted:</strong></td>
                                    <td>@selectedRequest.SubmittedAt.ToString("MMM dd, yyyy HH:mm")</td>
                                </tr>
                                <tr>
                                    <td><strong>Priority:</strong></td>
                                    <td>@selectedRequest.Priority</td>
                                </tr>
                                @if (!string.IsNullOrEmpty(selectedRequest.EmergencyContact))
                                {
                                    <tr>
                                        <td><strong>Emergency Contact:</strong></td>
                                        <td>@selectedRequest.EmergencyContact</td>
                                    </tr>
                                }
                            </table>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(selectedRequest.Reason))
                    {
                        <div class="mt-3">
                            <h6>Reason</h6>
                            <p class="border p-2 bg-light">@selectedRequest.Reason</p>
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(selectedRequest.ApproverComments))
                    {
                        <div class="mt-3">
                            <h6>Approver Comments</h6>
                            <p class="border p-2 bg-light">@selectedRequest.ApproverComments</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    @if (selectedRequest.Status == "Pending")
                    {
                        <button class="btn btn-danger" @onclick="() => CancelRequest(selectedRequest.Id)">
                            <i class="fas fa-times me-2"></i>
                            Cancel Request
                        </button>
                    }
                    <button class="btn btn-secondary" @onclick="CloseRequestDetails">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private LeaveSummaryDto? leaveSummary;
    private List<LeaveTypeBalanceDto> leaveBalances = new();
    private List<LeaveRequestDto> leaveRequests = new();
    private LeaveRequestDto? selectedRequest;
    
    private bool isLoading = true;
    private bool isLoadingRequests = false;
    private string? errorMessage;
    
    private string statusFilter = "";
    private string yearFilter = "";
    private int currentEmployeeId;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployeeData();
        await LoadLeaveData();
    }

    private async Task LoadEmployeeData()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState?.User?.Identity?.IsAuthenticated == true)
            {
                var userId = authState.User.FindFirst("sub")?.Value ?? 
                           authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                
                if (!string.IsNullOrEmpty(userId))
                {
                    // Get employee ID from user - you'll need to implement this method
                    // For now, we'll use a placeholder
                    currentEmployeeId = 1; // This should be retrieved from the user's employee record
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load employee data: {ex.Message}";
        }
    }

    private async Task LoadLeaveData()
    {
        try
        {
            isLoading = true;

            // Load leave summary
            var summaryResult = await LeaveService.GetEmployeeLeaveSummaryAsync(currentEmployeeId);
            if (summaryResult.IsSuccess)
            {
                leaveSummary = summaryResult.Data;
            }

            // Load leave balances
            var balancesResult = await LeaveService.GetEmployeeLeaveBalancesAsync(currentEmployeeId);
            if (balancesResult.IsSuccess && balancesResult.Data != null)
            {
                leaveBalances = balancesResult.Data;
            }

            // Load leave requests
            await LoadLeaveRequests();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load leave data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadLeaveRequests()
    {
        try
        {
            isLoadingRequests = true;
            
            // Load all leave requests for the employee
            var requestsResult = await LeaveService.GetEmployeeLeaveRequestsAsync(currentEmployeeId);
            if (requestsResult.IsSuccess && requestsResult.Data != null)
            {
                var allRequests = requestsResult.Data;
                
                // Apply client-side filtering
                var filtered = allRequests.AsEnumerable();
                
                if (!string.IsNullOrEmpty(statusFilter))
                {
                    filtered = filtered.Where(r => r.Status.Equals(statusFilter, StringComparison.OrdinalIgnoreCase));
                }
                
                if (!string.IsNullOrEmpty(yearFilter) && int.TryParse(yearFilter, out int year))
                {
                    filtered = filtered.Where(r => r.SubmittedAt.Year == year);
                }
                
                leaveRequests = filtered.OrderByDescending(r => r.SubmittedAt).ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load leave requests: {ex.Message}";
        }
        finally
        {
            isLoadingRequests = false;
        }
    }

    private async Task OnFilterChanged()
    {
        await LoadLeaveRequests();
    }

    private async Task LoadMoreRequests()
    {
        // Implementation for pagination
        await LoadLeaveRequests();
    }

    private void ViewRequestDetails(int requestId)
    {
        selectedRequest = leaveRequests.FirstOrDefault(r => r.Id == requestId);
    }

    private void CloseRequestDetails()
    {
        selectedRequest = null;
    }

    private async Task CancelRequest(int requestId)
    {
        try
        {
            var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this leave request?");
            if (confirmed)
            {
                // Implement cancel request logic
                await LoadLeaveRequests();
                if (selectedRequest?.Id == requestId)
                {
                    selectedRequest = null;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to cancel request: {ex.Message}";
        }
    }

    private string GetStatusColor(string status)
    {
        return status?.ToLower() switch
        {
            "pending" => "warning",
            "approved" => "success",
            "rejected" => "danger",
            "cancelled" => "secondary",
            _ => "secondary"
        };
    }
}