@page "/leave/history"
@using PayFlowPro.Models.DTOs.Leave
@using PayFlowPro.Core.Services
@using PayFlowPro.Shared.DTOs
@inject ILeaveManagementService LeaveService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@attribute [Authorize]

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h2 class="mb-0">
                            <i class="fas fa-history text-primary me-2"></i>
                            Leave History
                        </h2>
                        <div class="d-flex gap-2">
                            <a href="/leave/request/new" class="btn btn-success">
                                <i class="fas fa-plus me-2"></i>
                                New Request
                            </a>
                            <a href="/leave/dashboard" class="btn btn-outline-primary">
                                <i class="fas fa-arrow-left me-2"></i>
                                Back to Dashboard
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" @bind="statusFilter" @bind:after="ApplyFilters">
                                <option value="">All Status</option>
                                <option value="Pending">Pending</option>
                                <option value="Approved">Approved</option>
                                <option value="Rejected">Rejected</option>
                                <option value="Cancelled">Cancelled</option>
                                <option value="Draft">Draft</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Leave Type</label>
                            <select class="form-select" @bind="leaveTypeFilter" @bind:after="ApplyFilters">
                                <option value="">All Types</option>
                                @if (leaveTypes?.Any() == true)
                                {
                                    @foreach (var type in leaveTypes)
                                    {
                                        <option value="@type.Id">@type.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">From Date</label>
                            <input type="date" class="form-control" @bind="fromDateFilter" @bind:after="ApplyFilters" />
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">To Date</label>
                            <input type="date" class="form-control" @bind="toDateFilter" @bind:after="ApplyFilters" />
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button type="button" class="btn btn-outline-secondary w-100" @onclick="ClearFilters">
                                <i class="fas fa-times me-1"></i>
                                Clear
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Leave Requests Table -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-list me-2"></i>
                        Leave Requests (@(filteredRequests?.Count ?? 0))
                    </h5>
                    <div class="d-flex gap-2">
                        <button class="btn btn-sm btn-outline-success" @onclick="ExportToExcel">
                            <i class="fas fa-file-excel me-1"></i>
                            Export
                        </button>
                    </div>
                </div>
                <div class="card-body p-0">
                    @if (filteredRequests?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Request #</th>
                                        <th>Leave Type</th>
                                        <th>Start Date</th>
                                        <th>End Date</th>
                                        <th>Days</th>
                                        <th>Status</th>
                                        <th>Submitted</th>
                                        <th>Approved By</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var request in GetPagedRequests())
                                    {
                                        <tr>
                                            <td>
                                                <code>@request.RequestNumber</code>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <span class="badge me-2" style="background-color: @request.LeaveTypeColor; width: 8px; height: 8px;"></span>
                                                    @request.LeaveTypeName
                                                </div>
                                            </td>
                                            <td>
                                                @request.StartDate.ToString("MMM dd, yyyy")
                                                @if (request.IsHalfDay)
                                                {
                                                    <small class="d-block text-muted">@request.HalfDaySession Half Day</small>
                                                }
                                            </td>
                                            <td>
                                                @request.EndDate.ToString("MMM dd, yyyy")
                                            </td>
                                            <td>
                                                <span class="fw-bold">@request.DaysRequested.ToString("F1")</span>
                                            </td>
                                            <td>
                                                @{
                                                    var statusClass = request.Status switch
                                                    {
                                                        "Approved" => "success",
                                                        "Rejected" => "danger",
                                                        "Pending" => "warning",
                                                        "Cancelled" => "secondary",
                                                        "Draft" => "info",
                                                        _ => "light"
                                                    };
                                                }
                                                <span class="badge bg-@statusClass">@request.Status</span>
                                                @if (request.Status == "Rejected" && !string.IsNullOrEmpty(request.RejectionReason))
                                                {
                                                    <i class="fas fa-info-circle text-danger ms-1" 
                                                       title="@request.RejectionReason" 
                                                       data-bs-toggle="tooltip"></i>
                                                }
                                            </td>
                                            <td>
                                                <small>@request.SubmittedAt.ToString("MMM dd, yyyy")</small>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(request.ApproverName))
                                                {
                                                    <span>@request.ApproverName</span>
                                                    @if (request.ApprovedAt.HasValue)
                                                    {
                                                        <small class="d-block text-muted">@request.ApprovedAt.Value.ToString("MMM dd, yyyy")</small>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-info" @onclick="() => ViewRequest(request.Id)" title="View Details">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    @if (request.Status == "Pending" || request.Status == "Draft")
                                                    {
                                                        <button class="btn btn-outline-warning" @onclick="() => EditRequest(request.Id)" title="Edit">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button class="btn btn-outline-danger" @onclick="() => CancelRequest(request.Id)" title="Cancel">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                    }
                                                    @if (request.Status == "Draft")
                                                    {
                                                        <button class="btn btn-outline-success" @onclick="() => SubmitRequest(request.Id)" title="Submit">
                                                            <i class="fas fa-paper-plane"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (totalPages > 1)
                        {
                            <div class="d-flex justify-content-between align-items-center p-3 border-top">
                                <div class="text-muted">
                                    Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, filteredRequests.Count) 
                                    of @filteredRequests.Count entries
                                </div>
                                <nav>
                                    <ul class="pagination pagination-sm mb-0">
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">
                                                <i class="fas fa-chevron-left"></i>
                                            </button>
                                        </li>
                                        
                                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                        {
                                            <li class="page-item @(i == currentPage ? "active" : "")">
                                                <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                            </li>
                                        }
                                        
                                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">
                                                <i class="fas fa-chevron-right"></i>
                                            </button>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        }
                    }
                    else if (isLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3 text-muted">Loading leave history...</p>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-search fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No Leave Requests Found</h5>
                            <p class="text-muted">
                                @if (HasActiveFilters())
                                {
                                    <span>Try adjusting your filters or </span>
                                    <button class="btn btn-link p-0" @onclick="ClearFilters">clear all filters</button>
                                }
                                else
                                {
                                    <span>You haven't submitted any leave requests yet.</span>
                                }
                            </p>
                            <a href="/leave/request/new" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>
                                Create Your First Request
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<LeaveRequestDto>? allRequests;
    private List<LeaveRequestDto>? filteredRequests;
    private List<LeaveTypeDto>? leaveTypes;
    private bool isLoading = true;
    private int currentEmployeeId = 1;

    // Filters
    private string statusFilter = string.Empty;
    private int? leaveTypeFilter;
    private DateTime? fromDateFilter;
    private DateTime? toDateFilter;

    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)(filteredRequests?.Count ?? 0) / pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            // Load leave requests
            var requestsResult = await LeaveService.GetEmployeeLeaveRequestsAsync(currentEmployeeId);
            if (requestsResult.IsSuccess)
            {
                allRequests = requestsResult.Data?.OrderByDescending(r => r.SubmittedAt).ToList() ?? new List<LeaveRequestDto>();
            }

            // Load leave types for filtering
            var typesResult = await LeaveService.GetLeaveTypesAsync();
            if (typesResult.IsSuccess)
            {
                leaveTypes = typesResult.Data;
            }

            ApplyFilters();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyFilters()
    {
        filteredRequests = allRequests?.Where(r =>
            (string.IsNullOrEmpty(statusFilter) || r.Status.Equals(statusFilter, StringComparison.OrdinalIgnoreCase)) &&
            (!leaveTypeFilter.HasValue || r.LeaveTypeId == leaveTypeFilter.Value) &&
            (!fromDateFilter.HasValue || r.StartDate >= fromDateFilter.Value) &&
            (!toDateFilter.HasValue || r.EndDate <= toDateFilter.Value)
        ).ToList() ?? new List<LeaveRequestDto>();

        currentPage = 1;
        StateHasChanged();
    }

    private async Task ClearFilters()
    {
        statusFilter = string.Empty;
        leaveTypeFilter = null;
        fromDateFilter = null;
        toDateFilter = null;
        await ApplyFilters();
    }

    private bool HasActiveFilters()
    {
        return !string.IsNullOrEmpty(statusFilter) || 
               leaveTypeFilter.HasValue || 
               fromDateFilter.HasValue || 
               toDateFilter.HasValue;
    }

    private List<LeaveRequestDto> GetPagedRequests()
    {
        if (filteredRequests == null) return new List<LeaveRequestDto>();
        
        return filteredRequests
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private void ViewRequest(int requestId)
    {
        Navigation.NavigateTo($"/leave/request/{requestId}");
    }

    private void EditRequest(int requestId)
    {
        Navigation.NavigateTo($"/leave/request/edit/{requestId}");
    }

    private async Task CancelRequest(int requestId)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this leave request?"))
        {
            try
            {
                var result = await LeaveService.CancelLeaveRequestAsync(requestId, "Cancelled by employee");
                if (result.IsSuccess)
                {
                    await LoadData(); // Refresh the data
                    await JS.InvokeVoidAsync("alert", "Leave request cancelled successfully.");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", $"Error: {result.Message}");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error cancelling request: {ex.Message}");
            }
        }
    }

    private async Task SubmitRequest(int requestId)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Submit this draft leave request?"))
        {
            try
            {
                var result = await LeaveService.SubmitLeaveRequestAsync(requestId);
                if (result.IsSuccess)
                {
                    await LoadData(); // Refresh the data
                    await JS.InvokeVoidAsync("alert", "Leave request submitted successfully.");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", $"Error: {result.Message}");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error submitting request: {ex.Message}");
            }
        }
    }

    private async Task ExportToExcel()
    {
        // This would typically generate and download an Excel file
        await JS.InvokeVoidAsync("alert", "Export feature would be implemented here");
    }
}