@page "/leave/dashboard"
@using PayFlowPro.Models.DTOs.Leave
@using PayFlowPro.Core.Services
@using PayFlowPro.Shared.DTOs
@inject ILeaveManagementService LeaveService
@inject IEmployeeIdentityService EmployeeIdentityService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize]

<PageTitle>Leave Dashboard</PageTitle>

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h2 class="mb-0">
                            <i class="fas fa-calendar-alt text-primary me-2"></i>
                            Leave Dashboard
                        </h2>
                        <button class="btn btn-success" @onclick="ShowNewRequestModal">
                            <i class="fas fa-plus me-2"></i>
                            New Leave Request
                        </button>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle me-2"></i>
                            @successMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            @errorMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (leaveSummary != null)
    {
        <!-- Leave Balance Overview -->
        <div class="row mb-4">
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card bg-primary text-white h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <i class="fas fa-calendar-check fa-2x opacity-75"></i>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <div class="fs-5 fw-bold">@leaveSummary.TotalAllocated.ToString("F1")</div>
                                <div class="small">Total Allocated</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card bg-success text-white h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <i class="fas fa-check-circle fa-2x opacity-75"></i>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <div class="fs-5 fw-bold">@leaveSummary.TotalAvailable.ToString("F1")</div>
                                <div class="small">Available</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card bg-warning text-white h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <i class="fas fa-clock fa-2x opacity-75"></i>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <div class="fs-5 fw-bold">@leaveSummary.TotalPending.ToString("F1")</div>
                                <div class="small">Pending</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card bg-info text-white h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <i class="fas fa-calendar-times fa-2x opacity-75"></i>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <div class="fs-5 fw-bold">@leaveSummary.TotalUsed.ToString("F1")</div>
                                <div class="small">Used</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Leave Type Balances -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">
                            <i class="fas fa-list me-2"></i>
                            Leave Type Balances - FY @DateTime.Now.Year
                        </h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Leave Type</th>
                                        <th>Allocated</th>
                                        <th>Used</th>
                                        <th>Pending</th>
                                        <th>Available</th>
                                        <th>Carry Over</th>
                                        <th>Expiring</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var balance in leaveSummary.LeaveTypeBalances)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <span class="badge me-2" style="background-color: @balance.ColorCode; width: 12px; height: 12px;"></span>
                                                    <strong>@balance.LeaveTypeName</strong>
                                                    <small class="text-muted ms-2">(@balance.LeaveTypeCode)</small>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="fw-bold">@balance.AllocatedDays.ToString("F1")</span>
                                            </td>
                                            <td>
                                                <span class="text-danger">@balance.UsedDays.ToString("F1")</span>
                                            </td>
                                            <td>
                                                <span class="text-warning">@balance.PendingDays.ToString("F1")</span>
                                            </td>
                                            <td>
                                                <span class="text-success fw-bold">@balance.AvailableDays.ToString("F1")</span>
                                            </td>
                                            <td>
                                                @if (balance.CarriedOverDays > 0)
                                                {
                                                    <span class="text-info">@balance.CarriedOverDays.ToString("F1")</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if (balance.ExpiringDays > 0)
                                                {
                                                    <span class="text-warning">
                                                        @balance.ExpiringDays.ToString("F1")
                                                        @if (balance.ExpiryDate.HasValue)
                                                        {
                                                            <small class="d-block">Expires: @balance.ExpiryDate.Value.ToString("MMM dd, yyyy")</small>
                                                        }
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => RequestLeave(balance.LeaveTypeId)">
                                                    <i class="fas fa-plus me-1"></i>
                                                    Request
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Leave Requests -->
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-history me-2"></i>
                            Recent Leave Requests
                        </h5>
                        <a href="/leave/history" class="btn btn-sm btn-outline-primary">
                            View All
                            <i class="fas fa-arrow-right ms-1"></i>
                        </a>
                    </div>
                    <div class="card-body p-0">
                        @if (recentLeaveRequests?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Request #</th>
                                            <th>Leave Type</th>
                                            <th>Dates</th>
                                            <th>Days</th>
                                            <th>Status</th>
                                            <th>Submitted</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var request in recentLeaveRequests.Take(5))
                                        {
                                            <tr>
                                                <td>
                                                    <code>@request.RequestNumber</code>
                                                </td>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <span class="badge me-2" style="background-color: @request.LeaveTypeColor; width: 8px; height: 8px;"></span>
                                                        @request.LeaveTypeName
                                                    </div>
                                                </td>
                                                <td>
                                                    <div>
                                                        <strong>@request.StartDate.ToString("MMM dd")</strong> - 
                                                        <strong>@request.EndDate.ToString("MMM dd, yyyy")</strong>
                                                        @if (request.IsHalfDay)
                                                        {
                                                            <small class="text-muted d-block">(@request.HalfDaySession Half Day)</small>
                                                        }
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="fw-bold">@request.DaysRequested.ToString("F1")</span>
                                                </td>
                                                <td>
                                                    @{
                                                        var statusClass = request.Status switch
                                                        {
                                                            "Approved" => "success",
                                                            "Rejected" => "danger",
                                                            "Pending" => "warning",
                                                            "Cancelled" => "secondary",
                                                            _ => "info"
                                                        };
                                                    }
                                                    <span class="badge bg-@statusClass">@request.Status</span>
                                                </td>
                                                <td>
                                                    <small>@request.SubmittedAt.ToString("MMM dd, yyyy")</small>
                                                </td>
                                                <td>
                                                    <div class="btn-group btn-group-sm">
                                                        <button class="btn btn-outline-info" @onclick="() => ViewRequest(request.Id)">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                        @if (request.Status == "Pending" || request.Status == "Draft")
                                                        {
                                                            <button class="btn btn-outline-warning" @onclick="() => EditRequest(request.Id)">
                                                                <i class="fas fa-edit"></i>
                                                            </button>
                                                            <button class="btn btn-outline-danger" @onclick="() => CancelRequest(request.Id)">
                                                                <i class="fas fa-times"></i>
                                                            </button>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-calendar-alt fa-3x text-muted mb-3"></i>
                                <h5 class="text-muted">No Leave Requests Yet</h5>
                                <p class="text-muted">Start by creating your first leave request</p>
                                <button class="btn btn-primary" @onclick="ShowNewRequestModal">
                                    <i class="fas fa-plus me-2"></i>
                                    Create Leave Request
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading leave dashboard...</p>
        </div>
    }
</div>

@code {
    private LeaveSummaryDto? leaveSummary;
    private List<LeaveRequestDto>? recentLeaveRequests;
    private bool isLoading = true;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private int currentEmployeeId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user's employee ID from authentication context
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState?.User?.Identity?.IsAuthenticated == true)
            {
                var userId = authState.User.FindFirst("sub")?.Value ?? 
                           authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                
                if (!string.IsNullOrEmpty(userId))
                {
                    var employeeId = await EmployeeIdentityService.GetEmployeeIdAsync(userId);
                    if (employeeId.HasValue)
                    {
                        currentEmployeeId = employeeId.Value;
                        await LoadDashboardData();
                    }
                    else
                    {
                        errorMessage = "Employee profile not found for current user.";
                    }
                }
                else
                {
                    errorMessage = "Unable to identify current user.";
                }
            }
            else
            {
                errorMessage = "User not authenticated.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading dashboard: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Load leave summary
            var summaryResult = await LeaveService.GetEmployeeLeaveSummaryAsync(currentEmployeeId);
            if (summaryResult.IsSuccess)
            {
                leaveSummary = summaryResult.Data;
            }
            else
            {
                errorMessage = summaryResult.Message;
            }

            // Load recent leave requests
            var requestsResult = await LeaveService.GetEmployeeLeaveRequestsAsync(currentEmployeeId);
            if (requestsResult.IsSuccess)
            {
                recentLeaveRequests = requestsResult.Data;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private async Task ShowNewRequestModal()
    {
        Navigation.NavigateTo("/leave/request/new");
    }

    private async Task RequestLeave(int leaveTypeId)
    {
        Navigation.NavigateTo($"/leave/request/new?leaveTypeId={leaveTypeId}");
    }

    private async Task ViewRequest(int requestId)
    {
        Navigation.NavigateTo($"/leave/request/{requestId}");
    }

    private async Task EditRequest(int requestId)
    {
        Navigation.NavigateTo($"/leave/request/edit/{requestId}");
    }

    private async Task CancelRequest(int requestId)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this leave request?"))
        {
            try
            {
                var result = await LeaveService.CancelLeaveRequestAsync(requestId, "Cancelled by employee");
                if (result.IsSuccess)
                {
                    successMessage = "Leave request cancelled successfully.";
                    await LoadDashboardData();
                    StateHasChanged();
                }
                else
                {
                    errorMessage = result.Message;
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error cancelling request: {ex.Message}";
            }
        }
    }
}